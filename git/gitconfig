[alias]
    st = status -sb
    br = branch -vv
    bra = branch -vv --all
    ci = commit -v
    ca = commit --amend -v
    co = checkout
    di = diff
    dis = diff --stat
    diw = diff --color-words
    dc = diff --cached
    dcs = diff --cached --stat
    dcw = diff --cached --color-words
    dh = diff HEAD~
    dhs = diff HEAD~ --stat
    dhw = diff HEAD~ --color-words
    du = diff @{u}...
    dus = diff @{u}... --stat
    duw = diff @{u}... --color-words
    grp = grep -C 1
    ff = merge --ff-only
    noff = merge --no-ff
    f = fetch --tags --prune
    fa = fetch --all --tags --prune
    pullrb = pull --rebase
    count = diff --stat "4b825dc642cb6eb9a060e54bf8d69288fbee4904" # hash of empty tree
    credit = shortlog -sn
    linecredit = ! "lc() { git ls-tree --name-only -z -r HEAD | xargs -0 -n1 git diff --no-index --numstat /dev/null 2>/dev/null | grep -v '^-' | cut -f 3- | cut -d ' ' -f 3- | xargs -n1 git blame --line-porcelain | grep '^author ' | cut -d ' ' -f 2- | sort | uniq -c | sort -nr; }; lc"
    cc = rev-list HEAD --count
    cca = rev-list --all --count
    lg = log -p
    sf = show --format=fuller --show-signature
    sfw = show --format=fuller --color-words
    sfs = show --format=fuller --stat
    showtool = ! "st() { if [ -z $1 ]; then c='HEAD'; else c=$1; fi; git difftool $c~..$c; }; st"
    info = ! "inf() { if git rev-parse ${1} >/dev/null 2>&1; then git cat-file -p $(git rev-parse ${1}); else echo Invalid object; fi }; inf"
    update-submodules = submodule update --init --recursive
    upgrade-submodules = submodule update --init --remote
    empty-tree-hash = hash-object -t tree /dev/null
    root = rev-parse --show-toplevel

[color]
    ui = auto

[pretty]
    line = "%C(auto)%h %<|(60,trunc)%s %C(green)%ad%C(auto)%d"
    detail = "%C(auto)%h %s%n  %C(yellow)by %C(blue)%an %C(magenta)<%ae> [%G?] %C(green)%ad%n %C(auto)%d%n"

[merge]
    tool = vimdiff

[grep]
    lineNumber = true

[include]
    path = ~/.gitconfig_local
